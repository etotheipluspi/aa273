%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% project_workspace.m
% Author: Andrew Bylard
% Stanford University
% May 2016
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all; close all; clc;

ns = 6;     % Dimension of state
np = 4;     % Dimension of parameters
m = 6;      % Dimension of measurements
% m = 7;      % Dimension of measurements

% Free-flyer parameters
mf = 10;            % [kg] Mass
rf = 0.15;          % [m] Radius
Jf = 2/5*mf*rf^2;   % [kg*m^2] Moment of inertia
L = 0.05;           % [m] Gripper length

% Grasped object parameters
mo = 100;           % [kg] Mass
ro = 1;             % [m] Radius
Jo = 2/5*mo*ro^2;   % [kg*m^2] Moment of inertia
Rcm = rf+L+ro;      % [m] Distance between centers of mass
alpha = 0;          % [rad] Object center of mass offset

mo_min = 0.1;
Jo_min = 0.05;
Rcm_min = rf+L;

mtot = mf+mo;       % [kg] Total mass
Jtot = Jf+Jo;       % [kg*m^2] Summed moments of inertia
J1 = Jtot*mtot+mf*mo*Rcm^2;     % [kg^2*m^2] Common expression

T = 70;
dt = 0.01;
Nsteps = T/dt;
t = 0:dt:T;

xs0 = zeros(ns, 1);
xs = zeros(ns, Nsteps+1);
xs(:,1) = xs0;
R = diag([0.1*ones(3,1); 0.1*ones(3,1)]);

%% State EKF 1 Setup
x1s0 = xs0;
Q1s = diag([0.001*ones(3,1); 0.01*ones(3,1)]);
mu1s0 = x1s0;
Sigma1s0 = 0.1*eye(ns);
    
mu1s_up = zeros(ns, Nsteps+1);
mu1s_pr = zeros(ns, Nsteps+1);
Sigma1s_up = zeros(ns,ns,Nsteps+1);
Sigma1s_pr = zeros(ns,ns,Nsteps+1);
mu1s_up(:,1) = mu1s0;
mu1s_pr(:,1) = mu1s0;
Sigma1s_up(:,:,1) = Sigma1s0;
Sigma1s_pr(:,:,1) = Sigma1s0;
y1s_up = zeros(m,Nsteps+1);

A1st = zeros(ns,ns);
C1st = zeros(m,ns);

%% State EKF 2 Setup
x2s0 = xs0;
Q2s = diag([0.001*ones(3,1); 0.01*ones(3,1)]);
mu2s0 = x2s0;
Sigma2s0 = 0.1*eye(ns);
    
mu2s_up = zeros(ns, Nsteps+1);
mu2s_pr = zeros(ns, Nsteps+1);
Sigma2s_up = zeros(ns,ns,Nsteps+1);
Sigma2s_pr = zeros(ns,ns,Nsteps+1);
mu2s_up(:,1) = mu2s0;
mu2s_pr(:,1) = mu2s0;
Sigma2s_up(:,:,1) = Sigma2s0;
Sigma2s_pr(:,:,1) = Sigma2s0;
y2s_up = zeros(m,Nsteps+1);

A2st = zeros(ns,ns);
C2st = zeros(m,ns);

%% Parameter EKF Setup
xp0 = [mo
       Jo
       Rcm
       0];
Qp = diag([0.05*ones(4,1)]);
mup0 = [mf
       Jf
       rf+L
       0];
mup0 = xp0;
Sigmap0 = 0.9*eye(np);
    
mup_up = zeros(np, Nsteps+1);
mup_pr = zeros(np, Nsteps+1);
Sigmap_up = zeros(np,np,Nsteps+1);
Sigmap_pr = zeros(np,np,Nsteps+1);
mup_up(:,1) = mup0;
mup_pr(:,1) = mup0;
Sigmap_up(:,:,1) = Sigmap0;
Sigmap_pr(:,:,1) = Sigmap0;
xp = zeros(np, Nsteps+1);
xp(:,1) = xp0;
yp_up = zeros(m,Nsteps+1);

Apt = zeros(np,np);
Cpt = zeros(m,np);

y = zeros(m,Nsteps+1);

%% Model Identification Setup
twindow = 100;
mtest = zeros(2,Nsteps+1);
m1_conf = zeros(Nsteps+1,1);
m2_conf = zeros(Nsteps+1,1);

%% Dual EKF
for i = 1:Nsteps
    % Parameter estimation flag
    dekf_on = 1;
    model = 1;
    
    % Input
    a = 0.5;
    Fx = a*sin(t(i)/5);
    Fy = a*cos(t(i)/10);
    tau = a*cos(t(i)/7);
    
    % Predict next state (EKF 1)
    mu_pxd = mu1s_up(1,i); mu_pyd = mu1s_up(2,i); mu_thd = mu1s_up(3,i); mu_px = mu1s_up(4,i); mu_py = mu1s_up(5,i); mu_th = mu1s_up(6,i);
    mu1s_pr(:,i+1) = [mu_pxd+dt*Fx/mf
                      mu_pyd+dt*Fy/mf
                      mu_thd+dt*tau/J1
                      mu_px+dt*mu_pxd
                      mu_py+dt*mu_pyd
                      mu_th+dt*mu_thd];
    A1st = [eye(3)    zeros(3)
            dt*eye(3) eye(3)  ];
    Sigma1s_pr(:,:,i+1) = A1st*Sigma1s_up(:,:,i)*A1st'+Q1s;
    
    % Predict parameters (EKF 2)
    mu_pxd = mu2s_up(1,i); mu_pyd = mu2s_up(2,i); mu_thd = mu2s_up(3,i); mu_px = mu2s_up(4,i); mu_py = mu2s_up(5,i); mu_th = mu2s_up(6,i);
    mu_mo = mup_up(1,i); mu_jo = mup_up(2,i); mu_rcm = mup_up(3,i); mu_alp = mup_up(4,i);
    cta = cos(mu_th+mu_alp); sta = sin(mu_th+mu_alp); c2ta = cos(mu_th+mu_alp);
    mu_mtot = mf+mu_mo;
    mu_Jtot = Jf+mu_jo;
    mu_J1 = mu_Jtot*mu_mtot+mf*mu_mo*mu_rcm^2;
    mu_J2 = mu_Jtot*mu_mtot-mf*mu_mo*mu_rcm^2;
    if dekf_on
        mup_pr(:,i+1) = mup_up(:,i);
        Apt(1,1) = dt*((-Fx+mf*mu_rcm*mu_thd^2*cta)/mu_mtot^2+mu_Jtot*mf*mu_rcm*tau*sta/mu_J1^2+mf*mu_mo*mu_rcm^2*(mu_J1+mu_Jtot*mu_mtot)*sta*(Fy*cta+Fx*sta)/(mu_mtot^2*mu_J1^2));
        Apt(2,1) = dt*((-Fy+mf*mu_rcm*mu_thd^2*sta)/mu_mtot^2-mu_Jtot*mf*mu_rcm*tau*cta/mu_J1^2-mf*mu_mo*mu_rcm^2*(mu_J1+mu_Jtot*mu_mtot)*cta*(Fy*cta+Fx*sta)/(mu_mtot^2*mu_J1^2));
        Apt(1,2) = -dt*mu_mo*mu_rcm*sta/mu_J1^2*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta));
        Apt(2,2) = -dt*mu_mo*mu_rcm*cta/mu_J1^2*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta));
        Apt(1,3) = dt*mu_mo*( (mu_J2*tau+2*Fx*mu_Jtot*mu_mo*mu_rcm*sta)*sta/mu_J1^2+(mu_thd^2+2*Fy*mu_Jtot*mu_mtot*mu_mo*mu_rcm*sta/mu_J1^2)*cta/mu_mtot);
        Apt(2,3) = dt*mu_mo*(-(mu_J2*tau+2*Fx*mu_Jtot*mu_mo*mu_rcm*sta)*cta/mu_J1^2+(mu_thd^2*sta+2*Fy*mu_Jtot*mu_mtot*mu_mo*mu_rcm*cta^2/mu_J1^2)/mu_mtot);
        Apt(1,4) = -dt*mu_mo*mu_rcm/(mu_mtot*mu_J1)*(-Fy*mu_mo*mu_rcm*c2ta+mu_J1*mu_thd^2*sta-(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*sta)*cta);
        Apt(2,4) =  dt*mu_mo*mu_rcm/(mu_mtot*mu_J1)*(-Fx*mu_mo*mu_rcm*c2ta+mu_J1*mu_thd^2*cta+(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*cta)*sta);
        Apt(3,1) = -dt*mf*mu_rcm/mu_J1^2*(mf*mu_rcm*tau-Fy*mu_Jtot*cta-Fx*mu_Jtot*sta);
        Apt(3,2) = -dt*mu_mtot/mu_J1^2*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta));
        Apt(3,3) = dt*mu_mo/mu_J1^2*(mu_J1*(Fy*cta+Fx*sta)-2*mf*mu_rcm*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta)));
        Apt(3,4) = dt*mu_mo*mu_rcm/mu_J1*(Fx*cta-Fy*sta);
        Sigmap_pr(:,:,i+1) = Apt*Sigmap_up(:,:,i)*Apt'+Qp;

        mup_pr(1,i+1) = max(mo_min, mup_pr(1,i+1));
        mup_pr(2,i+1) = max(Jo_min, mup_pr(2,i+1));
        mup_pr(3,i+1) = max(Rcm_min, mup_pr(3,i+1));
%         mup_pr(4,i+1) = 0;
    else
        mup_pr(1,i+1) = mo;
        mup_pr(2,i+1) = Jo;
        mup_pr(3,i+1) = Rcm;
        mup_pr(4,i+1) = alpha;
    end
    
    % Predict next state (EKF 2)
    mu2s_pr(:,i+1) = [mu_pxd+dt*(Fx/mu_mtot+mu_mo*mu_rcm*mu_thd^2*cta/mu_mtot+mu_mo*mu_rcm*tau*sta/mu_J1+mu_mo^2*mu_rcm^2*(Fy*cta*sta+Fx*sta^2)/(mu_mtot*mu_J1))
                      mu_pyd+dt*(Fy/mu_mtot+mu_mo*mu_rcm*mu_thd^2*sta/mu_mtot-mu_mo*mu_rcm*tau*cta/mu_J1-mu_mo^2*mu_rcm^2*(Fx*cta*sta+Fy*cta^2)/(mu_mtot*mu_J1))
                      mu_thd+dt*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta))/mu_J1
                      mu_px+dt*mu_pxd
                      mu_py+dt*mu_pyd
                      mu_th+dt*mu_thd];
    A2st = eye(ns);
    A2st(1,3) = 2*dt/mu_mtot*mu_mo*mu_rcm*mu_thd*cta;
    A2st(2,3) = 2*dt/mu_mtot*mu_mo*mu_rcm*mu_thd*sta;
    A2st(1,6) = -dt*mu_mo*mu_rcm*(-Fy*mu_mo*mu_rcm*cos(2*(mu_th+mu_alp))+mu_J1*mu_thd^2*sta-cta*(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*sta))/(mu_mtot*mu_J1);
    A2st(2,6) =  dt*mu_mo*mu_rcm*(-Fx*mu_mo*mu_rcm*cos(2*(mu_th+mu_alp))+mu_J1*mu_thd^2*sta+sta*(mu_mtot*tau+2*Fy*mu_mo*mu_rcm*cta))/(mu_mtot*mu_J1);    
    A2st(3,6) =  dt*mu_mo*mu_rcm/mu_J1*(Fx*cta-Fy*sta);
    Sigma2s_pr(:,:,i+1) = A2st*Sigma2s_up(:,:,i)*A2st'+Q2s;
    
    % Simulate the free-flyer
    pxd = xs(1,i); pyd = xs(2,i); thd = xs(3,i); px = xs(4,i); py = xs(5,i); th = xs(6,i);
    xp(:,i+1) = xp0;
    if model == 1
        xs(:,i+1) = [pxd+dt*Fx/mf
                     pyd+dt*Fy/mf
                     thd+dt*tau/J1
                     px+dt*pxd
                     py+dt*pyd
                     th+dt*thd] + mvnrnd(zeros(ns,1),Q1s*dt^2)';
    else
        cta = cos(th+alpha); sta = sin(th+alpha);
        xs(:,i+1) = [pxd+dt*(Fx/mtot+mo*Rcm*thd^2*cta/mtot+mo*Rcm*tau*sta/J1+mo^2*Rcm^2*(Fy*cta*sta+Fx*sta^2)/(mtot*J1))
                     pyd+dt*(Fy/mtot+mo*Rcm*thd^2*sta/mtot-mo*Rcm*tau*cta/J1-mo^2*Rcm^2*(Fx*cta*sta+Fy*cta^2)/(mtot*J1))
                     thd+dt*(mtot*tau+mo*Rcm*(Fy*cta+Fx*sta))/J1
                     px+dt*pxd
                     py+dt*pyd
                     th+dt*thd] + mvnrnd(zeros(ns,1),Q2s*dt^2)';
    end
            
    % Take measurement
    pxd = xs(1,i+1); pyd = xs(2,i+1); thd = xs(3,i+1); px = xs(4,i+1); py = xs(5,i+1); th = xs(6,i+1);
    if model == 1
        y(:,i+1) = [px
                    py
                    th
                    Fx/mf
                    Fy/mf
                    tau/J1] + mvnrnd(zeros(m,1),R)';
    else
        cta = cos(th+alpha); sta = sin(th+alpha);
        y(:,i+1) = [px
                    py
                    th
                    Fx/mtot+mo*Rcm*thd^2*cta/mtot+mo*Rcm*tau*sta/J1+mo^2*Rcm^2*(Fy*cta*sta+Fx*sta^2)/(mtot*J1)
                    Fy/mtot+mo*Rcm*thd^2*sta/mtot-mo*Rcm*tau*cta/J1-mo^2*Rcm^2*(Fx*cta*sta+Fy*cta^2)/(mtot*J1)
                    thd] + mvnrnd(zeros(m,1),R)';
%                     (mtot*tau+mo*Rcm*(Fy*cta+Fx*sta))/J1] + mvnrnd(zeros(m,1),R)';
    end
    
    % Update state estimates (EKF 1)
    C1st(1,4) = 1; C1st(2,5) = 1; C1st(3,6) = 1; C1st(6,3) = 1;
    mu1s_up(:,i+1) = mu1s_pr(:,i+1)+Sigma1s_pr(:,:,i+1)*C1st'*inv(C1st*Sigma1s_pr(:,:,i+1)*C1st'+R)*(y(:,i+1)-C1st*mu1s_pr(:,i+1));
    Sigma1s_up(:,:,i+1) = Sigma1s_pr(:,:,i+1)-Sigma1s_pr(:,:,i+1)*C1st'*inv(C1st*Sigma1s_pr(:,:,i+1)*C1st'+R)*C1st*Sigma1s_pr(:,:,i+1);
    
    % Update parameter estimates (EKF 2)
    mu_pxd = mu2s_pr(1,i+1); mu_pyd = mu2s_pr(2,i+1); mu_thd = mu2s_pr(3,i+1); mu_px = mu2s_pr(4,i+1); mu_py = mu2s_pr(5,i+1); mu_th = mu2s_pr(6,i+1);
    mu_mo = mup_pr(1,i+1); mu_jo = mup_pr(2,i+1); mu_rcm = mup_pr(3,i+1); mu_alp = mup_pr(4,i+1);
    cta = cos(mu_th+mu_alp); sta = sin(mu_th+mu_alp); c2ta = cos(mu_th+mu_alp);
    mu_mtot = mf+mu_mo;
    mu_Jtot = Jf+mu_jo;
    mu_J1 = mu_Jtot*mu_mtot+mf*mu_mo*mu_rcm^2;
    if dekf_on
        Cpt(4,1) = ((-Fx+mf*mu_rcm*mu_thd^2*cta)/mu_mtot^2+mu_Jtot*mf*mu_rcm*tau*sta/mu_J1^2+mf*mu_mo*mu_rcm^2*(mu_J1+mu_Jtot*mu_mtot)*sta*(Fy*cta+Fx*sta)/(mu_mtot^2*mu_J1^2));
        Cpt(5,1) = ((-Fy+mf*mu_rcm*mu_thd^2*sta)/mu_mtot^2-mu_Jtot*mf*mu_rcm*tau*cta/mu_J1^2-mf*mu_mo*mu_rcm^2*(mu_J1+mu_Jtot*mu_mtot)*cta*(Fy*cta+Fx*sta)/(mu_mtot^2*mu_J1^2));
        Cpt(4,2) = -mu_mo*mu_rcm*sta/mu_J1^2*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta));
        Cpt(5,2) = -mu_mo*mu_rcm*cta/mu_J1^2*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta));
        Cpt(4,3) = mu_mo*( (mu_J2*tau+2*Fx*mu_Jtot*mu_mo*mu_rcm*sta)*sta/mu_J1^2+(mu_thd^2+2*Fy*mu_Jtot*mu_mtot*mu_mo*mu_rcm*sta/mu_J1^2)*cta/mu_mtot);
        Cpt(5,3) = mu_mo*(-(mu_J2*tau+2*Fx*mu_Jtot*mu_mo*mu_rcm*sta)*cta/mu_J1^2+(mu_thd^2*sta+2*Fy*mu_Jtot*mu_mtot*mu_mo*mu_rcm*cta^2/mu_J1^2)/mu_mtot);
        Cpt(4,4) = -mu_mo*mu_rcm/(mu_mtot*mu_J1)*(-Fy*mu_mo*mu_rcm*c2ta+mu_J1*mu_thd^2*sta-(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*sta)*cta);
        Cpt(5,4) =  mu_mo*mu_rcm/(mu_mtot*mu_J1)*(-Fx*mu_mo*mu_rcm*c2ta+mu_J1*mu_thd^2*cta+(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*cta)*sta);
%         Cpt(7,1) = -mf*mu_rcm/mu_J1^2*(mf*mu_rcm*tau-Fy*mu_Jtot*cta-Fx*mu_Jtot*sta);
%         Cpt(7,2) = -mu_mtot/mu_J1^2*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta));
%         Cpt(7,3) = mu_mo/mu_J1^2*(mu_J1*(Fy*cta+Fx*sta)-2*mf*mu_rcm*(mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta)));
%         Cpt(7,4) = mu_mo*mu_rcm/mu_J1*(Fx*cta-Fy*sta);
        C2st(1,4) = 1; C2st(2,5) = 1; C2st(3,6) = 1; C2st(6,3) = 1;
        C2st(4,6) = -mu_mo*mu_rcm*(-Fy*mu_mo*mu_rcm*cos(2*(mu_th+mu_alp))+mu_J1*mu_thd^2*sta-cta*(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*sta))/(mu_mtot*mu_J1);
        C2st(5,6) =  mu_mo*mu_rcm*(-Fx*mu_mo*mu_rcm*cos(2*(mu_th+mu_alp))+mu_J1*mu_thd^2*sta+sta*(mu_mtot*tau+2*Fy*mu_mo*mu_rcm*cta))/(mu_mtot*mu_J1);
%         Cst(7,6) =  mu_mo*mu_rcm/mu_J1*(Fx*cta-Fy*sta);
        mup_up(:,i+1) = mup_pr(:,i+1)+Sigmap_pr(:,:,i+1)*Cpt'*inv(Cpt*Sigmap_pr(:,:,i+1)*Cpt'+R)*(y(:,i+1)-[C2st Cpt]*[mu2s_pr(:,i+1); mup_pr(:,i+1)]);
        if i > 463
            i;
        end
        Sigmap_up(:,:,i+1) = Sigmap_pr(:,:,i+1)-Sigmap_pr(:,:,i+1)*Cpt'*inv(Cpt*Sigmap_pr(:,:,i+1)*Cpt'+R)*Cpt*Sigmap_pr(:,:,i+1);

        mup_up(1,i+1) = max(mo_min, mup_up(1,i+1));
        mup_up(2,i+1) = max(Jo_min, mup_up(2,i+1));
        mup_up(3,i+1) = max(Rcm_min, mup_up(3,i+1));
%         mup_up(4,i+1) = 0;
    else
        mup_up(1,i+1) = mo;
        mup_up(2,i+1) = Jo;
        mup_up(3,i+1) = Rcm;
        mup_up(4,i+1) = alpha;
    end
    
    % Update state estimates (EKF 2)
    mu_mo = mup_up(1,i+1); mu_jo = mup_up(2,i+1); mu_rcm = mup_up(3,i+1); mu_alp = mup_up(4,i+1);
    cta = cos(mu_th+mu_alp); sta = sin(mu_th+mu_alp); c2ta = cos(mu_th+mu_alp);
    mu_mtot = mf+mu_mo;
    mu_Jtot = Jf+mu_jo;
    mu_J1 = mu_Jtot*mu_mtot+mf*mu_mo*mu_rcm^2;
    
    C2st(1,4) = 1; C2st(2,5) = 1; C2st(3,6) = 1; C2st(6,3) = 1;
    C2st(4,6) = -mu_mo*mu_rcm*(-Fy*mu_mo*mu_rcm*cos(2*(mu_th+mu_alp))+mu_J1*mu_thd^2*sta-cta*(mu_mtot*tau+2*Fx*mu_mo*mu_rcm*sta))/(mu_mtot*mu_J1);
    C2st(5,6) =  mu_mo*mu_rcm*(-Fx*mu_mo*mu_rcm*cos(2*(mu_th+mu_alp))+mu_J1*mu_thd^2*sta+sta*(mu_mtot*tau+2*Fy*mu_mo*mu_rcm*cta))/(mu_mtot*mu_J1);
%     Cst(7,6) =  mu_mo*mu_rcm/mu_J1*(Fx*cta-Fy*sta);
    mu2s_up(:,i+1) = mu2s_pr(:,i+1)+Sigma2s_pr(:,:,i+1)*C2st'*inv(C2st*Sigma2s_pr(:,:,i+1)*C2st'+R)*(y(:,i+1)-C2st*mu2s_pr(:,i+1));
    Sigma2s_up(:,:,i+1) = Sigma2s_pr(:,:,i+1)-Sigma2s_pr(:,:,i+1)*C2st'*inv(C2st*Sigma2s_pr(:,:,i+1)*C2st'+R)*C2st*Sigma2s_pr(:,:,i+1);
    
    % Predict measurement (EKF 1)
    mu_pxd = mu1s_up(1,i+1); mu_pyd = mu1s_up(2,i+1); mu_thd = mu1s_up(3,i+1); mu_px = mu1s_up(4,i+1); mu_py = mu1s_up(5,i+1); mu_th = mu1s_up(6,i+1);
    y1s_up(:,i+1) = [mu_px
                     mu_py
                     mu_th
                     Fx/mf
                     Fy/mf
                     mu_thd];
    
    % Predict measurement (EKF 2)
    mu_pxd = mu2s_up(1,i+1); mu_pyd = mu2s_up(2,i+1); mu_thd = mu2s_up(3,i+1); mu_px = mu2s_up(4,i+1); mu_py = mu2s_up(5,i+1); mu_th = mu2s_up(6,i+1);
    cta = cos(mu_th+mu_alp); sta = sin(mu_th+mu_alp); c2ta = cos(mu_th+mu_alp);
    y2s_up(:,i+1) = [mu_px
                     mu_py
                     mu_th
                     Fx/mu_mtot+mu_mo*mu_rcm*mu_thd^2*cta/mu_mtot+mu_mo*mu_rcm*tau*sta/mu_J1+mu_mo^2*mu_rcm^2*(Fy*cta*sta+Fx*sta^2)/(mu_mtot*mu_J1)
                     Fy/mu_mtot+mu_mo*mu_rcm*mu_thd^2*sta/mu_mtot-mu_mo*mu_rcm*tau*cta/mu_J1-mu_mo^2*mu_rcm^2*(Fx*cta*sta+Fy*cta^2)/(mu_mtot*mu_J1)
                     mu_thd];
%                     (mu_mtot*tau+mu_mo*mu_rcm*(Fy*cta+Fx*sta))/mu_J1];

    % Check measurement probabilities
    p1 = mvnpdf(y(:,i+1),C1st*mu1s_pr(:,i+1),R);
    p2 = mvnpdf(y(:,i+1),C2st*mu2s_pr(:,i+1),R);
    if p1 > p2
        mtest(1,i+1) = 1;
    else
        mtest(2,i+1) = 1;
    end
    if i > twindow
        beta_a = sum(mtest(1,(i+1)-twindow+1:i+1));
        beta_b = sum(mtest(2,(i+1)-twindow+1:i+1));
        m1_conf(i+1) = beta_a/(beta_a+beta_b);
        m2_conf(i+1) = 1-m1_conf(i+1);
    end
    
    
end

%% State Estimate Plots
titles = 0;
% Model 1
figure
plot(mu1s_up(4,:),mu1s_up(5,:),'r'); hold on
plot(xs(4,:),xs(5,:),'linewidth',2.5);
if titles
    title('Estimating Trajectory (Model 1)','fontsize',14)
end
ylabel('Y Position (m)')
xlabel('X Position (m)')
grid on
saveas(gcf,'EstTrajectory_M1.png')

figure
plot(t,mu1s_up(6,:)*180/pi,'r'); hold on
plot(t,xs(6,:)*180/pi,'linewidth',2.5);
if titles
    title('Estimating \theta Angle (Model 1)','fontsize',14)
end
ylabel('Angle (deg)')
grid on
saveas(gcf,'EstAngle_M1.png')

figure
plot(t,mu1s_up(1,:),'r'); hold on
plot(t,xs(1,:),'linewidth',2.5);
title('Estimating X Velocity (Model 1)','fontsize',14)
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'EstXVelocity_M1.png')

figure
plot(t,mu1s_up(2,:),'r'); hold on
plot(t,xs(2,:),'linewidth',2.5);
if titles
    title('Estimating Y Velocity (Model 1)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'EstYVelocity_M1.png')

figure
plot(t,mu1s_up(3,:)*180/pi,'r'); hold on
plot(t,xs(3,:)*180/pi,'linewidth',2.5);
if titles
    title('Estimating Angular Velocity (Model 1)','fontsize',14)
end
ylabel('Angular Velocity (deg/s)')
grid on
saveas(gcf,'EstAngVelocity_M1.png')

% Model 2
figure
plot(mu2s_up(4,:),mu2s_up(5,:),'r'); hold on
plot(xs(4,:),xs(5,:),'linewidth',2.5);
if titles
    title('Estimating Trajectory (Model 2)','fontsize',14)
end
ylabel('Y Position (m)')
xlabel('X Position (m)')
grid on
saveas(gcf,'EstTrajectory_M2.png')

figure
plot(t,mu2s_up(6,:)*180/pi,'r'); hold on
plot(t,xs(6,:)*180/pi,'linewidth',2.5);
if titles
    title('Estimating \theta Angle (Model 2)','fontsize',14)
end
ylabel('Angle (deg)')
grid on
saveas(gcf,'EstAngle_M2.png')

figure
plot(t,mu2s_up(1,:),'r','linewidth',2.5); hold on
plot(t,xs(1,:),'linewidth',2.5);
if titles
    title('Estimating X Velocity (Model 2)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'EstXVelocity_M2.png')

figure
plot(t,mu2s_up(2,:),'r','linewidth',2.5); hold on
plot(t,xs(2,:),'linewidth',2.5);
if titles
    title('Estimating Y Velocity (Model 2)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'EstYVelocity_M2.png')

figure
plot(t,mu2s_up(3,:)*180/pi,'r'); hold on
plot(t,xs(3,:)*180/pi,'linewidth',2.5);
if titles
    title('Estimating Angular Velocity (Model 2)','fontsize',14)
end
ylabel('Angular Velocity (deg/s)')
grid on
saveas(gcf,'EstAngVelocity_M2.png')

%% Measurement Prediction Plots
% Model 1
figure
plot(y(1,:),y(2,:)); hold on
plot(y1s_up(1,:),y1s_up(2,:),'r')
if titles
    title('Predicting Trajectory Measurement (Model 1)','fontsize',14)
end
ylabel('Y Position (m)')
xlabel('X Position (m)')
grid on
saveas(gcf,'MeasTrajectory_M1.png')

figure
plot(t,y(3,:)*180/pi); hold on
plot(t,y1s_up(3,:)*180/pi,'r')
if titles
    title('Predicting Angle Measurement (Model 1)','fontsize',14)
end
ylabel('Angle (deg)')
grid on
saveas(gcf,'MeasAngle_M1.png')

figure
plot(t,y(4,:)); hold on
plot(t,y1s_up(4,:),'r','linewidth',2.5)
if titles
    title('Predicting X Acceleration Measurement (Model 1)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'MeasXVelocity_M1.png')

figure
plot(t,y(5,:)); hold on
plot(t,y1s_up(5,:),'r','linewidth',2.5)
if titles
    title('Predicting Y Acceleration Measurement (Model 1)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'MeasYVelocity_M1.png')

figure
plot(t,y(6,:)*180/pi); hold on
plot(t,y1s_up(6,:)*180/pi,'r','linewidth',1.5)
if titles
    title('Predicting Angular Velocity Measurement (Model 1)','fontsize',14)
end
ylabel('Angular Velocity (deg/s)')
grid on
saveas(gcf,'MeasAngVelocity_M1.png')

% Model 2
figure
plot(y(1,:),y(2,:)); hold on
plot(y2s_up(1,:),y2s_up(2,:),'r')
if titles
    title('Predicting Trajectory Measurement (Model 2)','fontsize',14)
end
ylabel('Y Position (m)')
xlabel('X Position (m)')
grid on
saveas(gcf,'MeasTrajectory_M2.png')

figure
plot(t,y(3,:)*180/pi); hold on
plot(t,y2s_up(3,:)*180/pi,'r')
if titles
    title('Predicting Angle Measurement (Model 2)','fontsize',14)
end
ylabel('Angle (deg)')
grid on
saveas(gcf,'MeasAngle_M2.png')

figure
plot(t,y(4,:)); hold on
plot(t,y2s_up(4,:),'r','linewidth',2.5)
if titles
    title('Predicting X Acceleration Measurement (Model 2)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'MeasXVelocity_M2.png')

figure
plot(t,y(5,:)); hold on
plot(t,y2s_up(5,:),'r','linewidth',2.5)
if titles
    title('Predicting Y Velocity Measurement (Model 2)','fontsize',14)
end
ylabel('Velocity (m/s)')
grid on
saveas(gcf,'MeasYVelocity_M2.png')

figure
plot(t,y(6,:)*180/pi); hold on
plot(t,y2s_up(6,:)*180/pi,'r','linewidth',1)
if titles
    title('Predicting Angular Velocity Measurement (Model 2)','fontsize',14)
end
ylabel('Angular Velocity (deg/s)')
grid on
saveas(gcf,'MeasAngVelocity_M2.png')

%% Parameter Estimate Plots
if dekf_on
    figure
    plot(t,xp(1,:),'linewidth',2.5); hold on
    plot(t,mup_up(1,:),'r','linewidth',2.5)
    if titles
        title('Estimating Grasped Object Mass','fontsize',14)
    end
    grid on
    saveas(gcf,'ParamMass.png')
    
    figure
    plot(t,xp(2,:),'linewidth',2.5); hold on
    plot(t,mup_up(2,:),'r','linewidth',2.5)
    if titles
        title('Estimating Grasped Object Moment of Inertia','fontsize',14)
    end
    grid on
    saveas(gcf,'ParamInertia.png')
    
    figure
    plot(t,xp(3,:),'linewidth',2.5); hold on
    plot(t,mup_up(3,:),'r','linewidth',2.5)
    ylabel('Distance (m)')
    if titles
        title('Estimating Distance to Center of Mass of Grasped Object','fontsize',14)
    end
    grid on
    saveas(gcf,'ParamDistance.png')
    
    figure
    plot(t,xp(4,:)*180/pi,'linewidth',2.5); hold on
    plot(t,mup_up(4,:)*180/pi,'r','linewidth',2.5)
    ylabel('Angle (deg)')
    if titles
        title('Estimating Angle to Center of Mass of Grasped Object','fontsize',14)
    end
    grid on
    saveas(gcf,'ParamAngle.png')
end

%% Model Choice Plot
figure
plot(t,m1_conf); hold on
plot(t,m2_conf,'g');
axis([0 70 0 1])
grid on;
if titles
    titles('Model Preference Confidence','fontsize',14)
end
ylabel('Model Confidence')
saveas(gcf,'ModelConfidence.png')